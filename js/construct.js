// Generated by CoffeeScript 1.3.3
(function() {
  var cs, generate, map;

  map = function(data, transform_key, transform_value) {
    var key, result, value;
    result = {};
    for (key in data) {
      value = data[key];
      result[transform_key(key)] = transform_value(value);
    }
    return result;
  };

  generate = function(template) {
    var e, _i, _len, _results;
    if (template instanceof Function) {
      return generate(template());
    } else if (template instanceof Array) {
      _results = [];
      for (_i = 0, _len = template.length; _i < _len; _i++) {
        e = template[_i];
        _results.push(generate(e));
      }
      return _results;
    } else if (template instanceof Object) {
      return map(template, (function(key) {
        return generate(key);
      }), (function(value) {
        return generate(value);
      }));
    } else {
      return template;
    }
  };

  cs = function(template) {
    /*
      Creates new construct.js template.
      
      The passed template is a structure containing a valid JSON structure
      additionally allow functions as values.
      
      If the generator is called, the template will manifested into a JSON strucutre
      by resolving the functions.
    */

    var generator;
    generator = function() {
      return generate(generator.template);
    };
    generator.template = template;
    return generator;
  };

  cs["if"] = function(condition, a, b) {
    /*
      Generator for a condition.
      
      The condition will be evaluated and if the condition evaluates to true, the a
      value will be returned, otherwise the b value will be returned.
    */
    return function() {
      if (generate(condition)) {
        return generate(a);
      } else {
        return generate(b);
      }
    };
  };

  cs.filter = function(predicate, data) {
    /*
      Filters a structure.
      
      The structure is filtered using the given predicate. The predicate must be a
      function getting the resolved key and the resolved value as a parameters. The
      return value must be a boolean. If the return value is true, the value will be
      stored under the key in the resulting map. If the return value is false, the
      key - value pair will be left out.
    */
    return function() {
      var key, result, value, _ref;
      result = {};
      _ref = generate(data);
      for (key in _ref) {
        value = _ref[key];
        if (predicate(key, value)) {
          result[key] = value;
        }
      }
      return result;
    };
  };

  this.cs = cs;

}).call(this);
