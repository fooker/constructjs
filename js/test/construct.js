// Generated by CoffeeScript 1.3.3
(function() {

  module("General assertions");

  test("Hello Test", function() {
    return ok(1 === 1, "Passed!");
  });

  module("Template generating");

  test("Constructor passing and storage and modification", function() {
    var c, t1, t2;
    t1 = {
      'foo': 23
    };
    t2 = {
      'bar': 42
    };
    c = cs(t1);
    deepEqual(c(), t1, "Template assigned to generator stays untouched");
    c.template = t2;
    return deepEqual(c(), t2, "Template modification are reflected after recall");
  });

  test("Template", function() {
    return deepEqual(cs({
      'foo': 42,
      'bar': 23
    })(), {
      'foo': 42,
      'bar': 23
    }, "Result is the same as the template");
  });

  test("Template with nested structure", function() {
    return deepEqual(cs({
      'foo': {
        'value': 42
      },
      'bar': {
        'value': 23
      }
    })(), {
      'foo': {
        'value': 42
      },
      'bar': {
        'value': 23
      }
    }, "Nested structures are handled");
  });

  test("Template with functions", function() {
    deepEqual(cs({
      'foo': 42,
      'bar': function() {
        return 23;
      }
    })(), {
      'foo': 42,
      'bar': 23
    }, "Function is evaluated");
    deepEqual(cs({
      'foo': 42,
      'bar': function() {
        return function() {
          return function() {
            return 23;
          };
        };
      }
    })(), {
      'foo': 42,
      'bar': 23
    }, "Function is evaluated recursively");
    deepEqual(cs({
      'foo': {
        'value': 42
      },
      'bar': function() {
        return {
          'value': 23
        };
      }
    })(), {
      'foo': {
        'value': 42
      },
      'bar': {
        'value': 23
      }
    }, "Function returning structure is evaluated");
    return deepEqual(cs({
      'foo': [23, 42],
      'bar': function() {
        return [42, 23];
      }
    })(), {
      'foo': [23, 42],
      'bar': [42, 23]
    }, "Function returning array is evaluated");
  });

  test("Template with Arrays", function() {
    deepEqual(cs({
      'foo': [42, 23]
    })(), {
      'foo': [42, 23]
    }, "Arrays are handled correctly");
    deepEqual(cs({
      'foo': [
        {
          'value': 42
        }, {
          'value': 23
        }
      ]
    })(), {
      'foo': [
        {
          'value': 42
        }, {
          'value': 23
        }
      ]
    }, "Arrays of structures are handled correctly");
    return deepEqual(cs({
      'foo': [
        function() {
          return 42;
        }, function() {
          return 23;
        }
      ]
    })(), {
      'foo': [42, 23]
    }, "Arrays of functions are handled correctly");
  });

  module("Logical functions");

  test("Function 'if'", function() {
    equal(cs(cs["if"](true, 'foo', 'bar'))(), 'foo', "Result comes from the if template");
    equal(cs(cs["if"](false, 'foo', 'bar'))(), 'bar', "Result comes from the else template");
    equal(cs(cs["if"]((function() {
      return true;
    }), (function() {
      return 'foo';
    }), (function() {
      return 'bar';
    })))(), 'foo', "Functions are evaluated for condition and if template");
    return equal(cs(cs["if"]((function() {
      return false;
    }), (function() {
      return 'foo';
    }), (function() {
      return 'bar';
    })))(), 'bar', "Functions are evaluated for condition and else template");
  });

  test("Function 'filter'", function() {
    deepEqual(cs(cs.filter((function(key, value) {
      return true;
    }), {
      'foo': 42,
      'bar': 23
    }))(), {
      'foo': 42,
      'bar': 23
    }, "Filter emits all values");
    deepEqual(cs(cs.filter((function(key, value) {
      return false;
    }), {
      'foo': 42,
      'bar': 23
    }))(), {}, "Filter emits no values");
    return deepEqual(cs(cs.filter((function(key, value) {
      return key === 'foo';
    }), {
      'foo': 42,
      'bar': 23
    }))(), {
      'foo': 42
    }, "Filter emits the foo value");
  });

  module("Big structure");

  test("Big structure", function() {
    var filters, t;
    filters = [
      {
        'name': 'foo',
        'value': 42
      }, {
        'name': 'bar',
        'value': 23
      }
    ];
    t = cs({
      'query': {
        'match_all': {}
      },
      'filter': cs["if"]((function() {
        return filters.length > 0;
      }), {
        'and': 'juchuu'
      }, {
        'or': 'ouch'
      }),
      'from': 0,
      'size': 50,
      'sort': []
    });
    equal(t().filter.and, 'juchuu');
    filters.length = 0;
    console.log(t());
    return equal(t().filter.or, 'ouch');
  });

}).call(this);
